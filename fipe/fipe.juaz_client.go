// Code generated by juaz. DO NOT EDIT.
// versions: v1.0.1
// source: fipe.juaz

package fipe

import (
	"context"
	"fmt"
	"net/http"
	"net/url"

	"github.com/isaqueveras/juazeiro"
)

// VehicleType defines the vehicletype enum type
type VehicleType string

const (
	VehicleTypeCaminhoes VehicleType = "caminhoes"
	VehicleTypeCarros    VehicleType = "carros"
	VehicleTypeMotos     VehicleType = "motos"
)

// String convert vehicletype type to string
func (t VehicleType) String() string {
	return string(t)
}

// IdentifierBrand data model for the identifier_brand structure
type IdentifierBrand struct {
	Type *VehicleType `json:"type,omitempty"`
}

// ResponseBrand data model for the response_brand structure
type ResponseBrand struct {
	Nome  *string `json:"nome,omitempty"`
	Valor *string `json:"valor,omitempty"`
}

// IdentifierPrice data model for the identifier_price structure
type IdentifierPrice struct {
	FipeCode   *string `json:"fipe_code,omitempty"`
	parameters *IdentifierPriceParams
}

// NewParams ...
func (i *IdentifierPrice) NewParams() {
	i.parameters = &IdentifierPriceParams{}
}

// WithParamTabelaReferencia ...
func (i *IdentifierPrice) WithParamTabelaReferencia(tabelaReferencia *int64) {
	i.parameters.TabelaReferencia = tabelaReferencia
}

// IdentifierPriceParams data model for the identifier_price_params structure
type IdentifierPriceParams struct {
	TabelaReferencia *int64 `json:"tabela_referencia,omitempty"`
}

// ResponsePrice data model for the response_price structure
type ResponsePrice struct {
	Valor            *string `json:"valor,omitempty"`
	Marca            *string `json:"marca,omitempty"`
	Modelo           *string `json:"modelo,omitempty"`
	AnoModelo        *int64  `json:"anoModelo,omitempty"`
	TipoVeiculo      *int    `json:"tipoVeiculo,omitempty"`
	Combustivel      *string `json:"combustivel,omitempty"`
	CodigoFipe       *string `json:"codigoFipe,omitempty"`
	DataConsulta     *string `json:"dataConsulta,omitempty"`
	MesReferencia    *string `json:"mesReferencia,omitempty"`
	SiglaCombustivel *string `json:"siglaCombustivel,omitempty"`
}

// Void data model for the void structure
type Void struct {}

// ResponseReferenceTable data model for the response_reference_table structure
type ResponseReferenceTable struct {
	Codigo *int64  `json:"codigo,omitempty"`
	Mes    *string `json:"mes,omitempty"`
}

// IFipeClient defines the interface of the provided methods
type IFipeClient interface {
	ObtainVehicleBrand(context.Context, *IdentifierBrand) (*[]ResponseBrand, error)
	ObtainVehiclePrice(context.Context, *IdentifierPrice) (*[]ResponsePrice, error)
	ObtainReferenceTable(context.Context, *Void) (*[]ResponseReferenceTable, error)
}

type FipeClient struct {
	cc juazeiro.ClientConnInterface
}

func NewFipeClient(cc juazeiro.ClientConnInterface) IFipeClient {
	return &FipeClient{cc: cc}
}

// ObtainVehicleBrand implements the ObtainVehicleBrand method of the interface
func (c *FipeClient) ObtainVehicleBrand(ctx context.Context, in *IdentifierBrand) (*[]ResponseBrand, error) {
	out := new([]ResponseBrand)
	uri := fmt.Sprintf("/fipe/marcas/v1/%v", *in.Type)
	err := c.cc.Invoke(ctx, http.MethodGet, uri, http.StatusOK, in, out)
	return out, err
}

// ObtainVehiclePrice implements the ObtainVehiclePrice method of the interface
func (c *FipeClient) ObtainVehiclePrice(ctx context.Context, in *IdentifierPrice) (*[]ResponsePrice, error) {
	out := new([]ResponsePrice)
	uri := fmt.Sprintf("/fipe/preco/v1/%v", *in.FipeCode)
	if in.parameters != nil {
		uri += _build_identifier_price_params_parameters(in.parameters)
		in.parameters = nil
	}
	err := c.cc.Invoke(ctx, http.MethodGet, uri, http.StatusOK, in, out)
	return out, err
}

// ObtainReferenceTable implements the ObtainReferenceTable method of the interface
func (c *FipeClient) ObtainReferenceTable(ctx context.Context, in *Void) (*[]ResponseReferenceTable, error) {
	out := new([]ResponseReferenceTable)
	err := c.cc.Invoke(ctx, http.MethodGet, "/fipe/tabelas/v1", http.StatusOK, in, out)
	return out, err
}

func _build_identifier_price_params_parameters(in *IdentifierPriceParams) string {
	val := &url.Values{}
	if in.TabelaReferencia != nil {
		val.Add("tabela_referencia", fmt.Sprintf("%v", *in.TabelaReferencia))
	}
	return "?" + val.Encode()
}
