// Code generated by juaz. DO NOT EDIT.
// versions: v1.0.1
// source: fipe.juaz

package fipe

import (
	"context"
	"fmt"
	"net/http"

	"github.com/isaqueveras/juazeiro"
)

// VehicleType defines the vehicletype enum type
type VehicleType string

const (
	VehicleTypeCaminhoes VehicleType = "caminhoes"
	VehicleTypeCarros    VehicleType = "carros"
	VehicleTypeMotos     VehicleType = "motos"
)

// String convert vehicletype type to string
func (t VehicleType) String() string {
	return string(t)
}

// Identifier data model for the identifier structure
type Identifier struct {
	Type *VehicleType `json:"type,omitempty"`
}

// Response data model for the response structure
type Response struct {
	Nome  *string `json:"nome,omitempty"`
	Valor *string `json:"valor,omitempty"`
}

// IFipeClient defines the interface of the provided methods
type IFipeClient interface {
	ObtainVehicleBrand(context.Context, *Identifier) (*[]Response, error)
}

type FipeClient struct {
	cc juazeiro.ClientConnInterface
}

func NewFipeClient(cc juazeiro.ClientConnInterface) IFipeClient {
	return &FipeClient{cc: cc}
}

// ObtainVehicleBrand implements the ObtainVehicleBrand method of the interface
func (c *FipeClient) ObtainVehicleBrand(ctx context.Context, in *Identifier) (*[]Response, error) {
	out := new([]Response)
	uri := fmt.Sprintf("/fipe/marcas/v1/%v", *in.Type)
	err := c.cc.Invoke(ctx, http.MethodGet, uri, http.StatusOK, in, out)
	return out, err
}
